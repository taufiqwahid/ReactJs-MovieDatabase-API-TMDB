{"version":3,"sources":["components/Search/Search.js","components/Results/Result.js","components/Results/Results.js","components/ResultsScroll/ResultsScroll.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","results","console","log","poster_path","src","alt","width","original_title","hidden","Results","map","key","id","ResultsScroll","popular","data","App","useState","s","selected","state","setState","e","target","value","prevState","document","getElementById","innerHTML","Axios","get","then","movie","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kTAGe,SAASA,EAAT,GAA0C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC5C,OACE,6BAASC,UAAU,kBACjB,2BACEC,KAAK,OACLD,UAAU,YACVE,YAAY,uBACZC,SAAUL,EACVM,WAAYL,K,MCTL,SAASM,EAAOC,GAC7B,IAEMC,EAAUD,EAAOA,OAMvB,OAJgB,OAAZC,GACFC,QAAQC,IAAI,oBAGc,OAAxBF,EAAQG,YAER,yBAAKV,UAAU,UACb,yBAAKW,IAAG,UAXC,oCAWD,OAAcJ,EAAQG,aAAeE,IAAI,SAASC,MAAM,QAChE,4BAAKN,EAAQO,iBAKf,yBAAKd,UAAU,SAASe,QAAM,I,MCjBrB,SAASC,EAAT,GAA+B,IAAZT,EAAW,EAAXA,QAChC,OACE,6BACE,6BAASP,UAAU,WAChBO,EAAQU,KAAI,SAACX,GAAD,OACX,kBAACD,EAAD,CAAQC,OAAQA,EAAQY,IAAKZ,EAAOa,U,MCL/B,SAASC,EAAcb,GACpC,IACMc,EAAUd,EAAQc,QAExB,OACE,yBAAKrB,UAAU,iBACZqB,EAAQJ,KAAI,SAACK,GACZ,OACE,yBAAKtB,UAAU,eAAekB,IAAKI,EAAKH,IACtC,yBACER,IAAG,UATA,oCASA,OAAcW,EAAKZ,aACtBE,IAAI,SACJC,MAAM,QAER,4BAAKS,EAAKR,qB,oBC+CPS,MAzDf,WAEE,IAFa,EAQaC,mBAAS,CACjCC,EAAG,GACHlB,QAAS,GACTc,QAAS,GACTK,SAAU,KAZC,mBAQNC,EARM,KAQCC,EARD,KAyCb,OACE,yBAAK5B,UAAU,MAAMmB,GAAG,OACtB,gCACE,+CAEF,8BACE,kBAAC,EAAD,CAAQrB,YAhCM,SAAC+B,GACnB,IAAIJ,EAAII,EAAEC,OAAOC,MACjBH,GAAS,SAACI,GACR,OAAO,2BAAKA,GAAZ,IAAuBP,EAAGA,QA6BU1B,OAzBzB,SAAC8B,GACA,UAAVA,EAAEX,MACJe,SAASC,eAAe,WAAWC,UAAY,UAC/CF,SAASC,eAAe,aAAaC,UAAY,YACjDC,IAAMC,IApBR,uFAoBwBC,MAAK,SAAChB,GAC1B,IAAMD,EAAUC,EAAKA,KAAKf,QAC1BqB,GAAS,SAACI,GACR,OAAO,2BAAKA,GAAZ,IAAuBX,QAASA,UAGpCe,IAAM,GAAD,OA7BP,qFA6BO,kBAAoBT,EAAMF,IAAKa,MAAK,SAACC,GACxC,IAAMhC,EAAUgC,EAAMjB,KAAKf,QAC3BqB,GAAS,SAACI,GACR,OAAO,2BAAKA,GAAZ,IAAuBzB,QAASA,cAalC,wBAAIY,GAAG,YACP,kBAAC,EAAD,CAAeE,QAASM,EAAMN,UAC9B,wBAAIF,GAAG,cACP,kBAAC,EAAD,CAASZ,QAASoB,EAAMpB,aC9CZiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASC,eAAe,SD0HpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAAAa,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.c19e07fd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Search.scss\";\r\n\r\nexport default function Search({ handleInput, search }) {\r\n  return (\r\n    <section className=\"searchBox-wrap\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"searchBox\"\r\n        placeholder=\"Search your Movie...\"\r\n        onChange={handleInput}\r\n        onKeyPress={search}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Result(result) {\r\n  const poster = \"https://image.tmdb.org/t/p/w500/\";\r\n\r\n  const results = result.result;\r\n\r\n  if (results === null) {\r\n    console.log(\"NOT FOUND MOVIE!\");\r\n  }\r\n\r\n  if (results.poster_path !== null) {\r\n    return (\r\n      <div className=\"result\">\r\n        <img src={`${poster}${results.poster_path}`} alt=\"POSTER\" width=\"100\" />\r\n        <h4>{results.original_title}</h4>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"result\" hidden>\r\n        {/* <img src={`${poster}${results.poster_path}`} alt=\"POSTER\" width=\"200\" />\r\n        <h3>{results.original_title}</h3> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Result from \"./Result.js\";\r\nimport \"./Results.scss\";\r\nexport default function Results({ results }) {\r\n  return (\r\n    <div>\r\n      <section className=\"results\">\r\n        {results.map((result) => (\r\n          <Result result={result} key={result.id} />\r\n        ))}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ResultsScroll.scss\";\r\n\r\nexport default function ResultsScroll(results) {\r\n  const poster = \"https://image.tmdb.org/t/p/w500/\";\r\n  const popular = results.popular;\r\n\r\n  return (\r\n    <div className=\"resultsScroll\">\r\n      {popular.map((data) => {\r\n        return (\r\n          <div className=\"resultScroll\" key={data.id}>\r\n            <img\r\n              src={`${poster}${data.poster_path}`}\r\n              alt=\"POSTER\"\r\n              width=\"100\"\r\n            />\r\n            <h4>{data.original_title}</h4>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport Search from \"./components/Search/Search.js\";\nimport \"./App.scss\";\nimport Results from \"./components/Results/Results.js\";\nimport ResultsScroll from \"./components/ResultsScroll/ResultsScroll.js\";\nimport Axios from \"axios\";\n\nfunction App() {\n  // \"https://api.themoviedb.org/3/search/movie?api_key=f1ab19c53cebd5165e00ac39dcf8b1ef&query=BATMAN\";\n  const apiUrl =\n    \"https://api.themoviedb.org/3/search/movie?api_key=f1ab19c53cebd5165e00ac39dcf8b1ef\";\n\n  const apiPopular =\n    \"https://api.themoviedb.org/3/movie/popular?api_key=f1ab19c53cebd5165e00ac39dcf8b1ef\";\n\n  const [state, setState] = useState({\n    s: \"\",\n    results: [],\n    popular: [],\n    selected: {},\n  });\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n    setState((prevState) => {\n      return { ...prevState, s: s };\n    });\n  };\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      document.getElementById(\"popular\").innerHTML = \"Popular\";\n      document.getElementById(\"searching\").innerHTML = \"Searching\";\n      Axios.get(apiPopular).then((data) => {\n        const popular = data.data.results;\n        setState((prevState) => {\n          return { ...prevState, popular: popular };\n        });\n      });\n      Axios(`${apiUrl}&query=${state.s}`).then((movie) => {\n        const results = movie.data.results;\n        setState((prevState) => {\n          return { ...prevState, results: results };\n        });\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\" id=\"App\">\n      <header>\n        <h1>Movie Database</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search} />\n        <h2 id=\"popular\"></h2>\n        <ResultsScroll popular={state.popular} />\n        <h2 id=\"searching\"></h2>\n        <Results results={state.results} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}